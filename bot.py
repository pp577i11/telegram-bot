import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("7901843273:AAFnfaz-tgV7g4ZKFca7CDVqInKF1KJI7wM")
ACCESS_PASSWORD = os.getenv("13041982")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

authorized_users = set()
user_filters = {}

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(
    KeyboardButton("üîç –ù–∞–π—Ç–∏"),
    KeyboardButton("üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ"),
)
keyboard.add(
    KeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞")
)

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    args = message.get_args()
    if args == ACCESS_PASSWORD:
        authorized_users.add(message.from_user.id)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ /start [–ø–∞—Ä–æ–ª—å]")

@dp.message_handler(lambda message: message.from_user.id not in authorized_users)
async def reject_unauthorized(message: types.Message):
    await message.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start [–ø–∞—Ä–æ–ª—å]")

@dp.message_handler(lambda message: message.text == "üîç –ù–∞–π—Ç–∏")
async def handle_search(message: types.Message):
    sort = user_filters.get(message.from_user.id, {}).get("sort", False)
    text = f"üîé –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...\n–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ: {'–≤–∫–ª—é—á–µ–Ω–∞' if sort else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}"
    await message.answer(text)

@dp.message_handler(lambda message: message.text == "üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ")
async def handle_sort_toggle(message: types.Message):
    uid = message.from_user.id
    if uid not in user_filters:
        user_filters[uid] = {}
    user_filters[uid]["sort"] = not user_filters[uid].get("sort", False)
    status = "–≤–∫–ª—é—á–µ–Ω–∞" if user_filters[uid]["sort"] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
    await message.answer(f"üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ {status}")

@dp.message_handler(lambda message: message.text == "‚ôªÔ∏è –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞")
async def handle_reset(message: types.Message):
    user_filters[message.from_user.id] = {}
    await message.answer("‚ôªÔ∏è –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
