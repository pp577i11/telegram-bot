import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("7901843273:AAFnfaz-tgV7g4ZKFca7CDVqInKF1KJI7wM")
BOT_PASSWORD = os.getenv("13041982")  # –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class FilterState(StatesGroup):
    waiting_for_password = State()
    choosing_action = State()
    setting_min_price = State()
    setting_max_price = State()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞
user_filters = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–π—Ç–∏")],
        [KeyboardButton(text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω")],
        [KeyboardButton(text="–°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞")]
    ],
    resize_keyboard=True
)

@dp.message(FilterState.waiting_for_password)
async def check_password(msg: Message, state: FSMContext):
    if msg.text == ACCESS_PASSWORD:
        await msg.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!", reply_markup=main_kb)
        await state.set_state(FilterState.choosing_action)
    else:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

@dp.message(FilterState.choosing_action, F.text == "–°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞")
async def reset_filters(msg: Message, state: FSMContext):
    user_filters[msg.from_user.id] = {}
    await msg.answer("üîÑ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.")

@dp.message(FilterState.choosing_action, F.text == "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω")
async def sort_filters(msg: Message, state: FSMContext):
    await msg.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:")
    await state.set_state(FilterState.setting_min_price)

@dp.message(FilterState.setting_min_price)
async def set_min_price(msg: Message, state: FSMContext):
    try:
        min_price = int(msg.text)
        user_filters[msg.from_user.id] = {"min": min_price}
        await msg.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:")
        await state.set_state(FilterState.setting_max_price)
    except ValueError:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(FilterState.setting_max_price)
async def set_max_price(msg: Message, state: FSMContext):
    try:
        max_price = int(msg.text)
        user_filters[msg.from_user.id]["max"] = max_price
        f = user_filters[msg.from_user.id]
        await msg.answer(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –æ—Ç {f['min']} –¥–æ {f['max']}")
        await state.set_state(FilterState.choosing_action)
    except ValueError:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(FilterState.choosing_action, F.text == "–ù–∞–π—Ç–∏")
async def find_ads(msg: Message, state: FSMContext):
    f = user_filters.get(msg.from_user.id, {})
    await msg.answer(f"üîç –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º:\n"
                     f"–æ—Ç {f.get('min', '0')} –¥–æ {f.get('max', '‚àû')} –≥—Ä–Ω\n"
                     f"(–∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≤–æ–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π)")

@dp.message()
async def start_auth(msg: Message, state: FSMContext):
    await msg.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
    await state.set_state(FilterState.waiting_for_password)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
